<?xml version="1.0" encoding="UTF-8"?>
<!-- 
 * Copyright (C) 2016 VNG/KING
 * 
 * This file is part of Imvertor.
 *
 * Imvertor is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Imvertor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Imvertor.  If not, see <http://www.gnu.org/licenses/>.
-->
<config>
   <id>
      <name>Compliancy Excel extractor</name>
      <version-control>$Id: parms.xml 7475 2016-03-23 10:54:06Z arjan $</version-control>
   </id>
   <cli-parms>
      <!-- specifiek voor deze chain -->
      <cli-parm>
         <name>cmpfile</name>
         <arg>path</arg>
         <tip>Full path to the fill-in compliancy form, in Excel (XSLX) format</tip>
         <required>true</required>
      </cli-parm> 
      <cli-parm>
         <name>complySTPurl</name>
         <arg>URL</arg>
         <tip>URL of the compliancy test platform</tip>
         <required>true</required>
      </cli-parm> 
      <cli-parm>
         <name>complyValidateXML</name>
         <arg>yes|no</arg>
         <tip>Yes if the xml must be parsed / validated before sending to test platform</tip>
         <required>true</required>
      </cli-parm> 
      <cli-parm>
         <name>complyValidateSTP</name>
         <arg>yes|no</arg>
         <tip>Yes if the xml must be passed to the test platform</tip>
         <required>true</required>
      </cli-parm> 
      
      <?x
      <cli-parm>
         <name>executor</name>
         <arg>URL</arg>
         <tip>The URL of the instance of Imvertor executor, for example: http://imvertor.armatiek.nl/imvertor-executor</tip>
         <required>true</required>
      </cli-parm> 
      x?>
      
      <!-- relevant: -->
      <cli-parm>
         <name>debug</name>
         <arg>yes|no</arg>
         <tip>Yes if run in debug mode</tip>
         <default>no</default>
      </cli-parm> 
      <cli-parm>
         <name>debugmode</name>
         <arg>mode</arg>
         <tip>Sets the debug mode</tip>
         <default>CHAIN</default>
      </cli-parm> 
      <cli-parm>
         <name>owner</name>
         <arg>name</arg>
         <tip>Explain</tip>
         <required>true</required>
      </cli-parm>
      <cli-parm>
         <name>metamodel</name>
         <arg>name</arg>
         <tip>Explain</tip>
         <required>true</required>
      </cli-parm> 
      <cli-parm>
         <name>project</name>
         <arg>name</arg>
         <tip>Explain</tip>
         <required>true</required>
      </cli-parm> 
      <cli-parm>
         <name>application</name>
         <arg>name</arg>
         <tip>Explain</tip>
         <required>true</required>
      </cli-parm> 
      <!-- specifiek voor deze chain -->
      <cli-parm>
         <name>arguments</name>
         <arg>path</arg>
         <tip>Include these arguments</tip>
         <default>/no_arguments</default>
      </cli-parm> 
      
      <!-- niet relevant; anders opzetten: -->
      <cli-parm>
         <name>task</name>
         <arg>compile</arg>
         <tip>Explain</tip>
         <required>true</required>
      </cli-parm> 
      <cli-parm>
         <name>forcecompile</name>
         <arg>false</arg>
         <tip>Explain</tip>
         <required>true</required>
      </cli-parm> 
      
   </cli-parms>
   
   <properties>
      <!--
         Where to store the intermediate "groups file"?
      -->
      <IMVERTOR_COMPLY_EXTRACT_GROUPS_FILE>${system/work-imvert-folder-path}/imvertor.61.cmp.groups.xml</IMVERTOR_COMPLY_EXTRACT_GROUPS_FILE>
      <!--
         Where to store the xml test files?
      -->
      <IMVERTOR_COMPLY_EXTRACT_TARGET_FOLDER>${system/work-cmp-folder-path}/xml</IMVERTOR_COMPLY_EXTRACT_TARGET_FOLDER>
      <!-- 
         stylesheet to process the __content.xml, extracted from the deserialized template, generates a <test-set> file with groups
      -->
      <WORK_COMPLY_EXTRACT_XSLPATH alias="COMEX">ComplyExtractor-extract.xsl</WORK_COMPLY_EXTRACT_XSLPATH>
      <!-- 
         path to temporary output of transforming __content.xml; this is not compressed back into the result Excel.
      -->
      <WORK_COMPLY_EXTRACT_FILE>${system/work-imvert-folder-path}/imvertor.60.extract.xml</WORK_COMPLY_EXTRACT_FILE>
      <!-- 
         stylesheet to process the <test-set> file with groups to XML files used for testing
      -->
      <WORK_COMPLY_BUILD_XSLPATH alias="COMBU">ComplyExtractor-build.xsl</WORK_COMPLY_BUILD_XSLPATH>
      <!-- 
         path to temporary output file of builder.
      -->
      <WORK_COMPLY_BUILD_FILE>${system/work-imvert-folder-path}/imvertor.61.build.xml</WORK_COMPLY_BUILD_FILE>
      <!-- 
         stylesheet to make the test XML files. 
         This is called in 2 modes (xslt param): final and valid.
      -->
      <WORK_COMPLY_MAKE_XSLPATH alias="COMMA">ComplyExtractor-make.xsl</WORK_COMPLY_MAKE_XSLPATH>
      <!-- 
         path to folder that will hold the generated test XML files, to be used for testing framework,
         and the temporary file that holds the tallied results.
      -->
      <WORK_COMPLY_MAKE_FOLDER_FINAL>${system/work-app-folder-path}/tests</WORK_COMPLY_MAKE_FOLDER_FINAL>
      <WORK_COMPLY_MAKE_FILE_FINAL>${system/work-imvert-folder-path}/imvertor.62.make-final.xml</WORK_COMPLY_MAKE_FILE_FINAL>
      <!-- 
         path to folder that will hold the temporary test XML files, to be used for validation against the koppelvlak schemas,
         and the temporary file that holds the tallied results.
      -->
      <WORK_COMPLY_MAKE_FOLDER_VALID>${system/work-comply-folder-path}/tests</WORK_COMPLY_MAKE_FOLDER_VALID>
      <WORK_COMPLY_MAKE_FILE_VALID>${system/work-imvert-folder-path}/imvertor.63.make-valid.xml</WORK_COMPLY_MAKE_FILE_VALID>
      <!-- 
         stylesheet to create the scenario file
      -->
      <WORK_COMPLY_SCENARIO_XSLPATH alias="COMSC">ComplyExtractor-scenario.xsl</WORK_COMPLY_SCENARIO_XSLPATH>
      <!-- 
         path to scenario file.
      -->
      <WORK_COMPLY_SCENARIO_FILE>${system/work-imvert-folder-path}/imvertor.61.scenario.xml</WORK_COMPLY_SCENARIO_FILE>
      <!-- 
         folder that stores the extracted template (temporary, serialized zip) 
       -->
      <WORK_COMPLY_TEMPLATE_FOLDERPATH>${system/work-comply-folder-path}/template</WORK_COMPLY_TEMPLATE_FOLDERPATH>
      
      <!--
         Where to store the intermediate Soap envelop (request format)?
      -->
      <IMVERTOR_COMPLY_EXTRACT_SOAP_REQUEST_FILE>${system/work-imvert-folder-path}/imvertor.64.cmp.soap-request.xml</IMVERTOR_COMPLY_EXTRACT_SOAP_REQUEST_FILE>
      <!-- 
         stylesheet to create the soap request
      -->
      <IMVERTOR_COMPLY_EXTRACT_SOAP_REQUEST_XSLPATH alias="SOAPREQ">ComplyExtractor-soap-request.xsl</IMVERTOR_COMPLY_EXTRACT_SOAP_REQUEST_XSLPATH>
      <!--
         Where to store the intermediate Soap envelop (response format)?
      -->
      <IMVERTOR_COMPLY_EXTRACT_SOAP_RESPONSE_FILE>${system/work-imvert-folder-path}/imvertor.65.cmp.soap-response.xml</IMVERTOR_COMPLY_EXTRACT_SOAP_RESPONSE_FILE>
      <!-- 
         stylesheet to process the soap response
      -->
      <IMVERTOR_COMPLY_EXTRACT_SOAP_RESPONSE_XSLPATH alias="SOAPRES">ComplyExtractor-soap-response.xsl</IMVERTOR_COMPLY_EXTRACT_SOAP_RESPONSE_XSLPATH>
      <!--
         Where to store the falt result of the response transformer?
      -->
      <IMVERTOR_COMPLY_EXTRACT_SOAP_FLAT_FILE>${system/work-imvert-folder-path}/imvertor.66.cmp.properties</IMVERTOR_COMPLY_EXTRACT_SOAP_FLAT_FILE>
      
   </properties>
</config>
